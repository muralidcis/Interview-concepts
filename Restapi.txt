REST ApI
REST is acronym for REpresentational State Transfer. It is architectural style for distributed hypermedia systems

REST defines 6 architectural constraints which make any web service – a true RESTful API
________________________________________________________________________________________


[Client–server] – By separating the user interface concerns from the data storage concerns, we improve the portability of the user interface across multiple platforms and improve scalability by simplifying the server components.


[Stateless] – Each request from client to server must contain all of the information necessary to understand the request, and cannot take advantage of any stored context on the server. Session state is therefore kept entirely on the client.

[Cacheable] – Cache constraints require that the data within a response to a request be implicitly or explicitly labeled as cacheable or non-cacheable. If a response is cacheable, then a client cache is given the right to reuse that response data for later, equivalent requests.

[Uniform interface] – By applying the software engineering principle of generality to the component interface, the overall system architecture is simplified and the visibility of interactions is improved. In order to obtain a uniform interface, multiple architectural constraints are needed to guide the behavior of components. REST is defined by four interface constraints: identification of resources; manipulation of resources through representations; self-descriptive messages; and, hypermedia as the engine of application state.

[Layered system] – The layered system style allows an architecture to be composed of hierarchical layers by constraining component behavior such that each component cannot “see” beyond the immediate layer with which they are interacting.

[Code on demand] (optional) – REST allows client functionality to be extended by downloading and executing code in the form of applets or scripts. This simplifies clients by reducing the number of features required to be pre-implemented.


Resources:
GET/PUT/POST/Delete


REST API Security Essentials:

-------------------------------
basic auth, OAuth

Secure an API/System ,Always Use HTTPS,http Basic Auth,http2, tcp and ssl handshakes,Use Password Hash,Consider OAuth or OAuth2,timestamp,
-------------------------------------------------------------------------------------------------------------------------------------------


one thing is sure that RESTful APIs should be stateless – so request authentication/authorization should not depend on cookies or sessions. Instead, each API request should come with some sort authentication credentials which must be validated on the server for every request.

Least Privilege: An entity should only have the required set of permissions to perform the actions for which they are authorized, and no more. Permissions can be added as needed and should be revoked when no longer in use.

Fail-Safe Defaults: A user’s default access level to any resource in the system should be “denied” unless they’ve been granted a “permit” explicitl

Economy of Mechanism: The design should be as simple as possible. All the component interfaces and the interactions between them should be simple enough to understand

Complete Mediation: A system should validate access rights to all its resources to ensure that they’re allowed and should not rely on the cached permission matrix. If the access level to a given resource is being revoked, but that isn’t reflected in the permission matrix, it would violate the security.

Open Design: This principle highlights the importance of building a system in an open manner—with no secret, confidential algorithms.

Separation of Privilege: Granting permissions to an entity should not be purely based on a single condition, a combination of conditions based on the type of resource is a better idea.

Least Common Mechanism: It concerns the risk of sharing state among different components. If one can corrupt the shared state, it can then corrupt all the other components that depend on it.

Psychological Acceptability: It states that security mechanisms should not make the resource more difficult to access than if the security mechanisms were not present. In short, security should not make worse the user experience.


Spring securty:
@web-secuirty-Extened web-security confiugration adopter: bcrypt: configure http,configure auto,



